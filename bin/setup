#!/bin/bash
#
# Interactive setup script for new contributors
#
# This should only be run once. In case the project
# needs to be rebuilt, use bin/rebuild instead.


# Information we will eventually need
GITHUB_USER=""
GITREPO_SERVER=""
GITREPO_CLIENT=""
GITREPO_METHOD=""
SETTING_AUTORUN=0
SETTING_SEEDNOW=0

# ANSI Colors for better formatting
COLOR_RED='\033[0;31m'
COLOR_GREEN='\033[0;32m'
COLOR_NONE='\033[0m'
COLOR_ORANGE='\033[01;38;5;208m'


# Navigate to repository root so we clone stuff in the right place
cd "$(dirname "$0")/../"


# Most importantly, center and output our logo ascii art
printf -v SPACES '%*s' 25
echo -e "${SPACES}${COLOR_ORANGE}        ‚¢†‚£∂‚£Ü                  "
echo -e "${SPACES}        ‚£ø‚†É‚¢ª‚£Ü                 "
echo -e "${SPACES}       ‚£Ä‚£ø‚£∂‚£∂‚£ø‚°Ñ                "
echo -e "${SPACES} ‚¢ø‚£ü‚†õ‚†õ‚£∑‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚¢Ä‚£†‚£§‚£∂‚£∂‚£∂‚£∂‚£∂‚£§‚£Ñ‚°Ä     "
echo -e "${SPACES} ‚†à‚†ª‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£Ñ   "
echo -e "${SPACES}    ‚†ô‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚°Ä "
echo -e "${SPACES}     ‚£†‚£§‚£Ñ‚£â‚†õ‚†ª‚†ø‚†á‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚¢ø‚£ø‚£ø‚£ß "
echo -e "${SPACES}   ‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚°ø‚†ü‚†õ‚†â‚£Å‚£§‚£§‚£æ‚£ø‚£ø‚£ø‚°Ñ"
echo -e "${SPACES} ‚£†‚£æ‚£ø‚†ø‚†õ‚†â ‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ã‚†Å‚¢Ä‚£†‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†á"
echo -e "${SPACES} ‚†õ‚†ã    ‚¢Ä‚£æ‚£ø‚£ø‚°ø‚†ã‚†Å ‚¢Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø "
echo -e "${SPACES}      ‚¢Ä‚£æ‚£ø‚°ø‚†ã   ‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å "
echo -e "${SPACES}      ‚£º‚£ø‚†ã    ‚£º‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å  "
echo -e "${SPACES}      ‚†à‚†Å    ‚¢∞‚°ü ‚†ô‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ã‚†Å    "
echo -e "${SPACES}            ‚¢∏‚°á  ‚£†‚£¥‚†æ‚†õ‚†â        "
echo -e "${SPACES}            ‚†ò‚£∑‚£∞‚°ü‚†ã            "
echo -e "${SPACES}             ‚†ô‚†ã\n${COLOR_NONE}";


# Output a totally not generic welcome message to the contributor
echo "üëã $(tput bold)Great to have you on board!$(tput sgr0)"
echo "Let's just run through some basic stuff to set up your local dev environment!"
echo -e "\nThis automated setup assumes that you have already forked the Kitsu repos"
echo "onto your GitHub account or have access to the main repos themseves. If you have"
echo "not done that yet, please make sure you have a fork ready before continuing."
echo -e "\n"


# Check if the user has docker and docker-compose installed
HAS_DOCKER_ITSELF=`which docker`
HAS_DOCKER_COMPOSE=`which docker-compose`

if [[ "$HAS_DOCKER_ITSELF" == "" || "$HAS_DOCKER_COMPOSE" == "" ]]; then
  echo "You will need to have docker and docker-compose installed. Go to"
  echo "https://docs.docker.com/get-docker/ or manually install the docker"
  echo "and docker-compose packages from your package manager."
  echo -e "\n"

  echo "We found"
  if [[ "$HAS_DOCKER_ITSELF" == "" ]]; then
    echo -e "${COLOR_RED}- No docker installation${COLOR_NONE} on your system"
  else
    echo -e "${COLOR_GREEN}- A docker installation${COLOR_NONE} at $HAS_DOCKER_ITSELF"
  fi
  if [[ "$HAS_DOCKER_COMPOSE" == "" ]]; then
    echo -e "${COLOR_RED}- No docker-compose installation${COLOR_NONE} on your system"
  else
    echo -e "${COLOR_GREEN}- A docker-compose installation${COLOR_NONE} at $HAS_DOCKER_COMPOSE"
  fi

  echo -e "\n"
  echo "Please come back after installing the missing tools."

  exit 0
fi


# Prompt the user for his GitHub username
while [ "" == "$GITHUB_USER" ]; do
  GITHUB_USER=`git config --get github.user`
  if [ "$GITHUB_USER" != "" ]; then
    INPUT_DEFAULT=" [$GITHUB_USER]"
  else
    INPUT_DEFAULT=""
  fi
  read -p "What is your GitHub username$INPUT_DEFAULT? " IN_GITHUB_USER

  if [[ "$IN_GITHUB_USER" != "" ]]; then
    GITHUB_USER="$IN_GITHUB_USER"
  fi

  if [[ "$GITHUB_USER" == "" ]]; then
    echo -e "${COLOR_RED}Please provide your GitHub username in order for us to find your forks.${COLOR_NONE}"
  fi
done


# Prompt the user to select which server repo he wants to use
while [ "" == "$GITREPO_SERVER" ]; do
  INPUT_DEFAULT=" [$GITHUB_USER/kitsu-server]"
  read -p "What's the path to your kitsu-server repository fork$INPUT_DEFAULT? " GITREPO_SERVER

  if [[ "$GITREPO_SERVER" == "" ]]; then
    GITREPO_SERVER="$GITHUB_USER/kitsu-server"
  fi
done


# Prompt the user to select which client repo he wants to use
while [ "" == "$GITREPO_CLIENT" ]; do
  INPUT_DEFAULT=" [$GITHUB_USER/kitsu-web]"
  read -p "What's the path to your kitsu-web repository fork$INPUT_DEFAULT? " GITREPO_CLIENT

  if [[ "$GITREPO_CLIENT" == "" ]]; then
    GITREPO_CLIENT="$GITHUB_USER/kitsu-web"
  fi
done


# Prompt the user to select which way he want to clone the repositories
while [ "" == "$GITREPO_METHOD" ]; do
  INPUT_DEFAULT=" [HTTPS/ssh]"
  read -p "Which method do you want to use for cloning your repositories$INPUT_DEFAULT? " GITREPO_METHOD

  if [[ "$GITREPO_METHOD" == "" ]]; then
    GITREPO_METHOD="https"
  fi
done


# Prompt the user to ask if he wants to start all containers after cloning
INPUT_DEFAULT=" [Y/n]"
read -p "Do you want to start all containers after the initial setup$INPUT_DEFAULT? " SETTING_AUTORUN

if [[ "$SETTING_AUTORUN" == "" ]]; then
  SETTING_AUTORUN="y";
fi

if [[ "$SETTING_AUTORUN" == *"y"* || "$SETTING_AUTORUN" == *"Y"* ]]; then
  SETTING_AUTORUN=1
else
  SETTING_AUTORUN=0
fi


# Prompt the user to ask if he wants to seed data after completion
# This can be skipped when autorun=0, since we need running containers!
if [[ $SETTING_AUTORUN -eq 1 ]]; then
  INPUT_DEFAULT=" [Y/n]"
  read -p "Do you want a database dump to be downloaded and imported$INPUT_DEFAULT? " SETTING_SEEDNOW

  if [[ "$SETTING_SEEDNOW" == "" ]]; then
    SETTING_SEEDNOW="y";
  fi

  if [[ "$SETTING_SEEDNOW" == *"y"* || "$SETTING_SEEDNOW" == *"Y"* ]]; then
    SETTING_SEEDNOW=1
  else
    SETTING_SEEDNOW=0
  fi
fi


# Map the users input to a valid GitHub repository
if [[ "$GITREPO_METHOD" == *"ssh"* || "$GITREPO_METHOD" == *"SSH"* ]]; then
  REPO_SERVER="git@github.com:$GITREPO_SERVER.git"
  REPO_CLIENT="git@github.com:$GITREPO_CLIENT.git"
else
  REPO_SERVER="https://github.com/$GITREPO_SERVER.git"
  REPO_CLIENT="https://github.com/$GITREPO_CLIENT.git"
fi


# Check if all the user's input is correct
if [[ $SETTING_AUTORUN -eq 0 ]]; then
  DOES_AUTORUN="${COLOR_RED} NOT${COLOR_NONE}"
else
  DOES_AUTORUN=""
fi

if [[ $SETTING_SEEDNOW -eq 0 ]]; then
  DOES_SEEDNOW="${COLOR_RED} NOT${COLOR_NONE}"
else
  DOES_SEEDNOW=""
fi

echo -e "\n"
echo -e "${COLOR_GREEN}Thanks for providing all of your information.${COLOR_NONE}"
echo "- We will use $GITREPO_METHOD to access GitHub in order to"
echo "- Clone kitsu-server from $REPO_SERVER"
echo "- Clone kitsu-web from $REPO_CLIENT"
echo -e "- And then$DOES_AUTORUN start everything automatically and$DOES_SEEDNOW seed the database."
echo -e "\n${COLOR_GREEN}Please remember:${COLOR_NONE} The setup could take a few minutes"
echo "Just give it some time, even if it seems to be stuck for a minute."
echo -e "\n"

INPUT_DEFAULT=" [Y/n]"
read -p "Is that ok for you$INPUT_DEFAULT? " SETTING_CONFIRM
echo -e "\n"

if [[ "$SETTING_CONFIRM" == "" ]]; then
  SETTING_CONFIRM="y";
fi

if [[ "$SETTING_CONFIRM" != *"y"* && "$SETTING_CONFIRM" != *"Y"* ]]; then
  exit 0
fi


# Fetch contributors project repositories from GitHub
HAD_OLD_DIRS=0

echo -e "\nAttempting to clone $REPO_SERVER to ./server"
if [[ -d ./server ]]; then
  echo -e "${COLOR_RED}Failed to clone server repository. You already have a ./server directory"
  echo -e "If you want to re-run this setup, please delete the existing ./server directory${COLOR_NONE}"
  HAD_OLD_DIRS=1
else
  git clone "$REPO_SERVER" ./server
fi

echo -e "\nAttempting to clone $REPO_CLIENT to ./client"
if [[ -d ./client ]]; then
  echo -e "${COLOR_RED}Failed to clone client repository. You already have a ./client directory"
  echo -e "If you want to re-run this setup, please delete the existing ./client directory${COLOR_NONE}"
  HAD_OLD_DIRS=1
else
  git clone "$REPO_CLIENT" ./client
fi


# Notify the user, if he had existing ./server or ./client
if  [[ $HAD_OLD_DIRS -eq 1 ]]; then
  INPUT_DEFAULT=" [Y/n]"
  echo -e "\n${COLOR_RED}One or more repositories were not cloned, because their directory already existed.${COLOR_NONE}"
  echo "Please make sure that the ./client and ./server directory contain the right files."
  echo "If you want to go through the setup a second time, just delete the directories first."
  read -p "Do you want to continue anyways$INPUT_DEFAULT? " IGNORE_OLD_FILES
  echo -e "\n"

  if [[ "$IGNORE_OLD_FILES" == "" ]]; then
    IGNORE_OLD_FILES="y";
  fi

  if [[ "$IGNORE_OLD_FILES" != *"y"* && "$IGNORE_OLD_FILES" != *"Y"* ]]; then
    exit 0
  fi
fi


# Attempting to run everything, check if sub-repos have been cloned
if [[ ! -d ./server ]]; then
  echo -e "${COLOR_RED}Sorry, we cannot automatically start everything. ./server is missing!${COLOR_NONE}"
  exit 1
fi

if [[ ! -d ./client ]]; then
  echo -e "${COLOR_RED}Sorry, we cannot automatically start everything. ./client is missing!${COLOR_NONE}"
  exit 1
fi


# Make the user very happy
echo -e "\n"
echo -e "${COLOR_GREEN}Awesome! Everything is ready to be built!${COLOR_NONE}"
echo -e "\n"


# If we got to this point, everything should be fine to be built
bash ./bin/build


# Automatically run bin/start if that option was accepted
if  [[ $SETTING_AUTORUN -eq 1 ]]; then
  bash ./bin/start

  # If the user wanted to seed, seed now
  if [[ $SETTING_SEEDNOW -eq 1 ]]; then
    echo -e "\n"
    echo -e "${COLOR_GREEN}Nice! We only need to seed the development database now!${COLOR_NONE}"
    echo -e "\n"
    bin/seed
    echo -e "\n${COLOR_GREEN}Finished seeding the development database!${COLOR_NONE}"
    echo "We only imported 50 covers and posters for you right now."
    echo "If you want to import more, simply bin/seed import [covers/posters] [amount]"
  fi

  # Prompt if the link should be opened
  INPUT_DEFAULT=" [Y/n]"
  echo -e "\n${COLOR_GREEN}Installation completed successfully.${COLOR_NONE}"
  echo "It may take a few seconds for everything to be up and running for the first time."
  read -p "Do you want to open the site in your browser now$INPUT_DEFAULT? " OPEN_CONFIRM

  if [[ "$OPEN_CONFIRM" == "" ]]; then
    OPEN_CONFIRM="y";
  fi

  if [[ "$OPEN_CONFIRM" == *"y"* || "$OPEN_CONFIRM" == *"Y"* ]]; then
    bash ./bin/open-browser
  else
    echo -e "\nYou can open the site in your browser manually or run bin/open-browser"
  fi
else
  echo -e "\n${COLOR_GREEN}Installation complete. You may start everything by running bin/start${COLOR_NONE}"
  echo "Afterwards, you can open the site in your browser by running bin/open-browser"
fi
